https://www.youtube.com/watch?v=x5pL6KwtIlA&list=PLFJQnCcZXWjsYlljYtU0oKTnJDcrLGgM2&index=11
https://github.com/aksoftware98/plannerapp-v2

02)



03)Blazor PlannerApp V2 |Crate the Github Repo
-Setup with github
-Create wasm Project
-Nuget -> MudBlazor
       -> Blazored.LocalStorage
-Inject builder.Services.AddMudServices()
-inject builder.Services.AddBlazoredLocalStorage();
*wwwroot/index.html 
-remove   <link href="css/bootstrap/bootstrap.min.css" rel="stylesheet" />
-
<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
 - <script src="_content/MudBlazor/MudBlazor.min.js"></script>

 *code MainLayout.razor
 *_import.razor -> @using MudBlazor
 *dotnet watch run

 04)Blazor PlannerApp V2 |Discover the V2.0 API and Test it with
 *Migration da ada just Update-Database
 *create use
 {
  "email": "rose@yahoo.com",
  "firstName": "rose",
  "lastName": "nur",
  "password": "Rose@123",
  "confirmPassword": "Rose@123"
}
*login to get token
{
  "email": "rose@yahoo.com",
  "password": "Rose@123"
}
{
  "value": {
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJyb3NlQHlhaG9vLmNvbSIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL25hbWVpZGVudGlmaWVyIjoiZGFlZjU3OTctODU1My00NjMzLWE4YzEtMDAyMWNhNTRhZGY5IiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvZ2l2ZW5uYW1lIjoicm9zZSIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL3N1cm5hbWUiOiJudXIiLCJleHAiOjE2NTE3MTg5ODEsImlzcyI6Imh0dHA6Ly9haG1hZG1vemFmZmFyLm5ldCIsImF1ZCI6Imh0dHA6Ly9haG1hZG1vemFmZmFyLm5ldCJ9.8HfY6FgBDXvvyA01IheCkPoGyk-tEty_Mm6zmiuqP6s",
    "expiryDate": "2022-05-05T02:49:41Z"
  },
  "message": "Access token retrieved successfully",
  "isSuccess": true
}

*GitKraken -> click Stage all changes , Give names , Push ,Commit all change

*create library PlannerApp.Shared and it`s folders
*paste special json object as a class

 05)Blazor PlannerApp V2 |Setup HttpClient & Create Authorization Messaging Handler
 *Message handler , set token in header of http
 -nuget Microsoft.Extensions.Http
 -inject builder.Services.AddHttpClient at program.cs
 -create AuthorizationMessageHandler
 -code AuthorizationMessageHandler to intercept token for supply from local storage to header
 inject  builder.Services.AddScoped(sp => sp.GetService<IHttpClientFactory>().CreateClient("PlannerApp.Api"));

  06)Blazor PlannerApp V2 |Create custom Authentication state Providers
  *create JwtAuthenticationStateProvider
  -how app will know user login or not or have role or not
  *nuget System.IdentityModel.Tokens.Jwt
  *nuget  <PackageReference Include="Microsoft.AspNetCore.Components.Authorization" Version="6.0.0" />
  -inject 
  builder.Services.AddAuthorizationCore();
  builder.Services.AddScoped<AuthenticationStateProvider, JwtAuthenticationStateProvider>();
  *_import.razor
  @using Microsoft.AspNetCore.Components.Authorization
  @using Microsoft.AspNetCore.Authorization
  *code App.Razor -> add CascadingAuthenticationState 
  *code index.razor to test

  07)Blazor PlannerApp V2 |Implement Auth Layout & Design Login Form
  push to git -> implement the authentication infrastructure

  *AuthLayout purpose for demo
  -create Shared/AuthLayout
  -use AuthLayout in index.razor

  *create Authentication/Login.razor
  *create Components/Authentication/LoginForm -> call bay login.razor
  *_Import.razor
  *create LoginRequest
  *code LoginForm
  *test https://localhost:5001/authentication/login

   push to git -> create the auth layout & the login form

   08)Blazor PlannerApp V2 |Implement the logic of login form
   * create LoginResult.cs
   * Code LoginForm
   *Test login and check local Storage
 



   09)Blazor PlannerApp V2 |Logout Functionality & user menu in App Bar
   * push to git -> implement the logic of the login form
   *https://mudblazor.com/components/menu#icon-buttons
   *create  LoginDisplay
   *LoginDisplay use in MainLayout

   10)Blazor PlannerApp V2 create register model with validation using fluent validation
   **fluentvalidation make entity clean without data annotation

   * push to git -> implement the login display
   *create PlannerApp.Shared/Models/RegisterRequest.cs
   *nuget ->     <PackageReference Include="FluentValidation" Version="10.2.3" />
   *create PlannerApp.Shared/Validators/RegisterRequestValidator


   11)Create HttpClientServices Project to Abstract the api calls
   * push to git -> create and validate the model of registering
   *create project PlaneerApp.Client.Services



   12)Design & Implement the register form
   13)Fix the layout of register form
   14)Fetch Plan 1 | Create the model & http Client Service
   15)Fetch Plan 1 | Create the plan cards list component
   16)Search & Pagination the plan card list
   17)Show pan in DataGrid using MudBlazor table with server side reload
